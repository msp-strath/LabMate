LabMate: supporting types for MATLAB
====================================

MATLAB is a key workhorse in many scientific and engineering disciplines that are heavily reliant on numerical methods. It helps us do powerful things. However, as with all software, MATLAB code may contain implementation errors and bugs. In good programming practice for MATLAB developers, programmers use comments to make clear what physical systems their data concern and how the data should be interpreted, specifying, e.g., units of measure for quantities. Regrettably, none of this rich and often disciplined metadata is perceptible to MATLAB: MATLAB enforces the compatibility of producers and consumers of data by run-time checking of tags which indicate only machine representation, not any form of meaning. In reality, the programmers document meaning for each other's benefit but keep the machine in the dark.

The University of Strathclyde, with input from the National Physical Laboratory, is developing LabMate, a tool to reify current virtuous engineering practices as a formal language of MATLAB comments. MATLAB remains in the dark, but LabMate reads, assesses, and transforms MATLAB programs in accordance with these comments. LabMate inputs MATLAB code with our formal comments and outputs a new version of its input, responding to the comments, as if it were a development collaborator. It pays attention to three kinds of comment that MATLAB ignores: directives (which can be passive documentation or requests for information or action), responses (information previously delivered by LabMate which may need revision), and delimiters for LabMate-generated code (which may also need revision).  However, LabMate also reads MATLAB code, which presents a significant reverse engineering challenge as the MATLAB syntax is largely specified informally and by example.

LabMate seeks to establish the consistency of calculations and assignments both in terms of the MATLAB code and with the type documentation directives supplied by the programmer. The information thus accumulated is the basis for responses and even for type-directed generation of code to perform standard tasks. Hence, LabMate is a source of interactive feedback and assistance on MATLAB programs under construction. It is based on ideas adapted from the *type theory* technology underlying interactive theorem proving systems, but with a novel focus on the algebraic structure required to classify matrices and the meanings of the quantities therein, e.g., their physical dimensions. Our enterprise is thus to bring advanced type systems to effectiveness within, rather than instead of, existing scientific and engineering toolchains and practices.

This talk will outline the design principles behind LabMate, our current progress, and our future plans.
