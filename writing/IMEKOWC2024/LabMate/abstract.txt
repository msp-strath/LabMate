LabMate: supporting types for MatLab
====================================

MatLab is a key workhorse in many scientific and engineering disciplines heavily reliant on numerical mehods. It helps us do powerful things, some of which manage not to be in error. Healthy communities of MatLab developers institute generous documentary practices, using comments to make clear what things their data concern and how the data should be interpreted, specifying, e.g., units of measure for quantities. Regrettably, none of this rich and often disciplined metadata is perceptible to MatLab: MatLab enforces the compatibility of producers and consumers of data by run-time checking of tags which indicate only machine representation, not any form of meaning. That is, the humans document meaning for each other's benefit but keep the machine in the dark.

Working together, the UK's National Physical Laboratory and the University of Strathclyde are developing
LabMate, a tool to reify current virtuous engineering practices as a formal language of MatLab comments. MatLab is still in the dark, but LabMate reads, assesses and transforms MatLab programs in accordance with these comments. This talk will outline the design principles behind LabMate, our current progress, and our future plans.

LabMate inputs MatLab code with our formal comments and outputs a new version of its input, responding to the comments, as if it were a development collaborator. It pays attention to three kinds of comment that MatLab ignores: directives (which can be passive documentation or requests for information or action), responses (information previously delivered by LabMate which may need revision), and delimiters for LabMate-generated code (which may also need revision). However, LabMate also reads MatLab code, which was quite some reverse engineering challenge as the syntax is largely specified informally and by example. LabMate seeks to establish the consistency of calculations and assignments internally, and with type documentation directives supplied by the programmer. The information thus accumulated is the basis for responses and even for type-directed generation of boilerplate code.

LabMate is thus a source of interactive feedback and assistance on MatLab programs under construction. It is based on ideas adapted from the *type theory* technology underlying interactive theorem proving systems, but with a novel focus on the algebraic structure required to classify matrices and the meanings of the quantities therein, e.g., their physical dimensions. Our enterprise is thus to bring advanced type systems to effectiveness within, rather than instead of, existing scientific and engineering toolchains and practices.
